The Maze Project - MVP Summary
(A 3D Game created using SDL2)

The Maze Project aims to create an engaging 3D maze game using the SDL2 graphics library. Players navigate through a maze, avoiding walls and obstacles while collecting rewards and tracking their progress. The MVP focuses on essential features, including maze rendering, player controls, movement mechanics, collision detection, and basic textures.

Key Features:
Maze Structure:
Walls represented by a 2D array and rendered using SDL2.
Player Controls:
Movement and rotation controlled by arrow keys, with user input processed via SDL_Event.
Movement Mechanics:
Basic functionality for forward, backward, left, and right movement within the maze.
Collision Detection:
Prevents the player from passing through walls.
Maze Data Management:
Parser to read maze data from a text file and store it in a 2D array.
Textures:
Basic textures for walls to enhance visual appeal.
Progress and Challenges
Progress Rating: 7/10

This week, I made significant strides in the Maze Project. I successfully implemented basic movement mechanics, allowing the player to navigate using the arrow keys. Collision detection is partially functional, ensuring players cannot pass through walls. Additionally, I started developing a maze parser for dynamic maze generation. However, I still face challenges with texture loading and the complete integration of user input handling.

Completed Aspects:

Basic movement mechanics.
Initial collision detection.
Maze data parser.
Incomplete Aspects:

Wall textures not yet implemented.
Full integration of user input handling is ongoing.
Main menu and game save/load functionalities remain to be developed.
Most Difficult Technical Challenge:
Implementing accurate collision detection was the most challenging technical issue this week. Initially, a simple bounding box method led to inaccuracies in movement, with players occasionally appearing to collide with walls. To resolve this, I researched various techniques and adopted a more robust collision detection system that considers the dimensions of both the player and walls, recalibrating bounding box checks for accuracy. After extensive testing and debugging, I successfully established a reliable system that prevents the player from passing through walls while maintaining smooth navigation through the maze.

Most Difficult Non-Technical Challenge:
The biggest non-technical challenge I faced was managing my time amid distractions. Balancing coursework and personal commitments made it hard to focus on the project. I often lost track of time due to minor issues and external interruptions. To tackle this, I implemented a structured approach using time-blocking techniques, dedicating specific periods for focused work. By disabling non-essential notifications and creating a distraction-free workspace, I improved my concentration and made more consistent progress.

Screenshots
Screenshot 1:
Description of what the screenshot shows (e.g., player navigating the maze)
[1.png](https://postimg.cc/N5xhphQx)


Screenshot 2:
Description of what the screenshot shows (e.g., collision detection in action)
[![2.png](https://i.postimg.cc/GmvbHVnt/2.png)](https://postimg.cc/5X9hrP0W)

Let me know if you need further assistance.
